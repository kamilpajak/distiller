; PlatformIO Project Configuration File for Distiller
; Automated distillation control system for Arduino MKR WiFi 1010

[platformio]
; Default environments to build/upload when no -e option is given
default_envs = prod
; Custom scripts for compilation database generation
extra_scripts = 
    scripts/generate_compile_commands.py
; Global packages
packages = 
    tool-clang-format @ 15.0.7

; Production environment for Arduino MKR WiFi 1010
; Note: Arduino SAMD21 is limited to C++11 despite the C++23 flag
[env:prod]
platform = atmelsam
board = mkrwifi1010
framework = arduino
; Serial monitor settings
monitor_speed = 9600
; Build settings
build_flags = 
    -std=c++11
    ; Add debug symbols and definitions when build_type=debug
    $PIOENV == "prod" && DEBUG_BUILD == "1" ? -DDEBUG -g : ""
build_unflags = -std=gnu++11
; Library dependencies
lib_deps = 
    bogde/HX711@^0.7.5
    milesburton/DallasTemperature@^3.11.0
    br3ttb/PID@^1.2.1
    duinowitchery/hd44780@^1.3.2
    tcmenu/TaskManagerIO@^1.4.3
; Upload settings
upload_speed = 115200
; Debug settings
debug_tool = jlink
; Static analysis configuration
check_tool = clangtidy
check_flags = 
    clangtidy: --config-file=.clang-tidy
check_patterns = 
    src
    include
    test
check_skip_packages = yes

; Native environment for local development
[env:native]
platform = native
; Build settings - can use C++23 on native platform
build_flags = -std=c++23
build_unflags = -std=gnu++11
; Library dependencies
lib_deps =
    google/googletest@1.15.2
; Static analysis configuration
check_tool = clangtidy
check_flags = 
    clangtidy: --config-file=.clang-tidy
check_patterns = 
    src
    include
    test
check_skip_packages = yes

; Test environment for unit testing
; Note: Tests can use C++23 since they run on the native platform
[env:test]
platform = native
; Build settings
build_flags = 
    -std=c++23
    -DUNIT_TEST
    -I test
    -I src
    -I include
    -I .pio/libdeps/test/DallasTemperature/src
    -I .pio/libdeps/test/OneWire
    -I .pio/libdeps/test/TaskManagerIO/src/
build_unflags = -std=gnu++11
; Library dependencies
lib_deps =
    google/googletest@1.15.2
    bogde/HX711@^0.7.5
    milesburton/DallasTemperature@^3.11.0
    br3ttb/PID@^1.2.1
    duinowitchery/hd44780@^1.3.2
    tcmenu/TaskManagerIO@^1.4.3
    paulstoffregen/OneWire@^2.3.7
; Test framework configuration
test_framework = googletest
test_build_src = true
build_src_filter = +<src/*.cpp> +<src/*.h> -<src/main.cpp>
; Static analysis configuration
check_tool = clangtidy
check_flags = 
    clangtidy: --config-file=.clang-tidy
check_patterns = 
    src
    include
    test
check_skip_packages = yes

; CI environment for continuous integration
[env:ci]
platform = native
; Build settings
build_flags = 
    -std=c++23
    -DUNIT_TEST
    -I test
    -I src
    -I include
    -I .pio/libdeps/ci/DallasTemperature/src
    -I .pio/libdeps/ci/OneWire
    -I .pio/libdeps/ci/TaskManagerIO/src/
build_unflags = -std=gnu++11
; Library dependencies
lib_deps =
    google/googletest@1.15.2
    bogde/HX711@^0.7.5
    milesburton/DallasTemperature@^3.11.0
    br3ttb/PID@^1.2.1
    duinowitchery/hd44780@^1.3.2
    tcmenu/TaskManagerIO@^1.4.3
    paulstoffregen/OneWire@^2.3.7
; Test framework configuration
test_framework = googletest
test_build_src = true
build_src_filter = +<src/*.cpp> +<src/*.h> -<src/main.cpp>
; Static analysis configuration - stricter for CI
check_tool = clangtidy
check_flags = 
    clangtidy: --config-file=.clang-tidy --warnings-as-errors=*
check_patterns = 
    src
    include
    test
check_skip_packages = yes
